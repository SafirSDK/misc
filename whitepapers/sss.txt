// -*- coding: utf-8 -*-
:encoding: UTF-8


Requirements for Safir SDK Core
===============================

== Introduction

=== Scope
This document establishes the requirements for Safir SDK Core.


TODO: *Skriv om detta!*

The requirements are logically grouped in chapters. Within chapters the requirements are assigned an identifier on the form _n, where n is a positive number starting at 1 and incremented by 1 for each new requirement.

The requirements can be individually identified through combining the sub chapter identifier with the requirement identifier. An example of this is cap_fun_ipc_1 for requirement _1 in sub chapter Inter process communication (<cap_fun_ipc>).

=== Revision History

.Revision History
[width="80%",cols="10%,15%,75%",options="header",frame="topbot",grid="none"]
|=========================================================
|Version|Date      |Comment

|1.0A   |2014-03-13|
First draft, based on information from SSS-106323

|=========================================================

=== Definitions

Application::
An executable that uses Safir SDK Core. May be a GUI presentation layer app or a pure business logic application without GUI.

Configure::
Using the word ’configure’ in a requirement descriptive text implies that there is no need for recompilation of applications in order to make changes available to the system.

Type Extension::
The use of inheritance to define a class with additional members.

Dob::
Distributed Objects, the distribution mechanism of Safir SDK Core that provides distribution of Messages, Services and Entities.

== Background

=== Architecture in systems using Safir SDK Core

TODO: *Tona ner detta.*

A fundamental design tenet of the Safir architecture guidelines is to split or separate a system's functionality into smaller components or applications

separate business logic from presentation services. This is achieved by using an architecture with services that allow business logic applications and presentation service applications to exchange data in an efficient manner. The fundamental data distribution services are contained in Safir SDK Core, which is descibed in this document.

=== Not in our Scope

==== System vs System of Systems

A _System_ in Safir SDK Core terms is one or more computers connected by the distribution mechanism of Safir SDK Core, the _Dob_. These computers are able to communicate using the Dob. The Dob has certain expectations about the network environment and topology, for example it expects reasonable connectivity. The Dob does not support Split/Join (se below).

A _System of Systems_ in Safir SDK Core terms is for example a system where multiple vehicles each have a Safir SDK Core system that all communicate with each other over radio, and is resilient to very low bandwidth and frequent communication failures, e.g. due to a radio silent zone.

Safir SDK Core does not provide a mechanism to synchronize between systems, it is only meant for communication within a system. However, it provides some of the building blocks needed to build an inter-system synchronization mechanism.

==== Split/Join

_Split_/_Join_ is a mechanism whereby one or several computers in a system are disconnected from the rest, forming a separate system. At a later time they are reconnected, and _the information sets in the two systems are merged automatically_ to produce one system with a coherent and synchronized information set.

The distribution mechanism in Safir SDK Core is not expected to provide Split/Join functionality. However, the distribution mechanism shall provide the fundamental tools needed to add Split/Join functionality when Safir SDK Core is used to build Systems of Systems.

=== Typical systems
This section aims to define some typical systems where Safir SDK Core can be used for inter-process and inter-computer communication. It is meant to give a framework in which to view the requirements that follow in later sections.

These typical systems are only examples, and more kinds of systems and mixtures between these types are also possible.

==== Single computer system
All business logic applications and gui applications run on the same computer and use Safir SDK Core for inter-process communication. There are no requirements for redundancy.

Network topology:: N/A

==== Client/Server system
All business logic applications run on a server, and there are some or many clients that may or may not all be connected at the same time. All the gui applications typically run on the clients.

Clients send no or very little data between each other, the majority of data is sent to and from the server. Clients may loose contact with the server and be allowed to reconnect automatically.

Network topology:: The clients may be situated on the same LAN as the server, but clients may also be on a WAN or on the other side of VPN tunnels. Different clients may have different connectivity to the server, and clients may not be able to send or receive network packets from all other clients.

==== Vehicle mounted Client/Server system

Same configuration as ``Client/Server system'' above, but with two vital differences:

1. One or more clients may intermittently have very bad connectivity, e.g. due to a slip ring.
2. The network may fail intermittently due to power failures.

==== Client/Server system with redundancy

As ``Client/Server system'' above, but instead of one server there may be two or more servers with redundancy. This means that when a server fails another server will take over its responsibilities with no or very little delay. The redundant server may provide identical or degraded service to the clients.

A failed server will not be allowed to reconnect to the system until the software on the server is in a state where it will not contaminate the system with out of date or incorrect data.

Network topology:: The servers are expected to have good connectivity between them, even if bandwidth may be low and latency may be high. But network failures between the servers are expected to be few. The servers may be located close to each other on the same LAN or far from each other on a WAN or a VPN.
+
If the connectivity between the servers is bad there will be many redundancy failovers which will cause a lot of network traffic and server reboots.

==== Complex System with Soft Real-Time requirements

This type of system contains multiple servers with different responsibilities, and all or most of the servers have redundancy. There are many clients, some of which have good connectivity and some that have bad connectivity.

This type of system has a continuous high load of data, the transmission of which requires soft real-time performance. Some of the data is of a transient kind, e.g. data that is updated every second.

Other data in the system has no real-time requirements, but may periodically generate a lot of traffic, e.g. database searches.

As described above in ``Client/Server system with redundancy'' the connectivity between the redundant servers is expected to be good.

One or more of the clients can be placed at a remote location, connected via a WAN or a VPN link.

== Safir SDK Core Requirements

=== Distribution
TODO

==== Messages
Messages are data that any application can subscribe to and any application can send. When an application sends a message, it is forwarded to all subscribers of that message. Messages do not have guaranteed delivery. If some application cannot keep up with the rate of messages it will miss messages.

TODO: ...

==== Entities

TODO: ta bort objekt, använd instans.
TODO: syftning i första meningen

An entity is a class of which there can be objects (known as instances) that are stored in the Dob and has one (and only one) owner. Only the owner is allowed to modify the object. Any application can subscribe for an entity instances, which means that it will receive updates whenever the instances are changed. Applications can also send requests to the entity owner asking it to change something in the object.

Entity updates are guaranteed to reach all subscribers, with one important caveat; subscribers are not guaranteed to see all intermediate states of an entity.

TODO: beskriv i fritext hur handlers och instanser och ägarskap hänger ihop. Och hur man kan skicka Cre/Up/Del till handler/ägare.

ent_req_1::
    Safir SDK Core shall keep a local object cache with entity instances on each node.

ent_req_2::
    Safir SDK Core shall keep all local object caches synchronized.

ent_req_3::
    Safir SDK Core shall provide a mechanism for applications to register handlers for entity classes.

req_4::
    Safir SDK Core shall provide a mechanism for applications that has a registered handler to create entity instances of the class.

req_5::
    Safir SDK Core shall ensure that an entity instance has one, and only one, owner.

req_6:: 
    Safir SDK Core shall provide a mechanism for entity owners to update entities.

req_7:: 
    Safir SDK Core shall provide a mechanism for entity owners to delete entities.

req_8::
    Safir SDK Core shall provide a mechanism for applications to send requests to handlers to create entities.

req_9::
    Safir SDK Core shall provide a mechanism for applications to send update requests for existing entities. The update requests shall be delivered to the entity owner.

req_10::
    Safir SDK Core shall provide a mechanism for applications to send delete requests for existing entities. The delete requests shall be delivered to the entity owner.

req_3::
    Safir SDK Core shall provide a mechanism for entity handlers/owners to send responses to received requests.

req_11::
    Safir SDK Core shall provide a mechanism for applications to subscribe to entity instance creations.

req_12::
    Safir SDK Core shall provide a mechanism for applications to subscribe to entity instance updates.

req_13::
    Safir SDK Core shall provide a mechanism for applications to subscribe to entity instance deletes.

req_14::
    Safir SDK Core shall provide a mechanism for applications to read entity instance states.


==== Services
A Service has one or more handlers (known as a Service Handler) to which any application (known as a Requestor) can send service requests. For each service request that is sent, a response is received. The response is sent by the Service Handler, and indicates the result of the operation.

req_1::
    Safir SDK Core shall provide a mechanism for applications to register handlers for service classes.

req_2::
    Safir SDK Core shall provide a mechanism for applications to send requests to service handlers.

req_3::
    Safir SDK Core shall provide a mechanism for service handlers to send responses to received requests.


==== Requests/Responses
The following requirements applies to entity create requests, entity update requests, entity delete requests, service requests and their corresponding responses.

req_1::
    If a request can not be delivered or if the receiver of the request does not send a response within a configurable amount of time, Safir SDK Core shall generate a timeout response to the requestor.

TODO: ...

==== Addressing  
TODO

=== Persistence
Persistency services are provided to allow applications to store data persistently in order to survive a restart of the system or an application.

req_1:: It shall be possible to configure entity types to be persistent.
req_2:: Types marked as persistent shall be automatically persisted.
req_3:: Persisted entity instances shall be automatically passed to the handler on startup.

TODO: definiera vad vi ska kunna spara till. Fil, MySQL, MariaDb, Mimer, PostgreSQL

=== Types
Safir SDK Core shall provide a type system that can be used to construct complex types that can be exchanged between nodes and between applications written in various programming languages.

req_1:: Safir SDK Core shall provide basic types like integers and floating point values.

req_2:: Safir SDK Core shall permit creation of user defined enumeration types.

req_3:: Safir SDK Core shall permit creation of user defined classes consisting of the predefined types and other user defined types.

==== Parameters
TODO: beskriv vad en parameter är och att man kan läsa dem
TODO: skriv om req_5 så att man bara fattar vad en parameter kan ha för typer av värden.
TODO: vad är reference?

req_5:: A parameter shall consist of a name and a value. The value can be of a simple type, which is either an integer, a float or a string or an object composed by simple types and/or objects.

req_6:: An application shall be able to reference and read the value of a parameter. 

==== Properties

TODO: bygg in den här definitionen på nåt bra sätt i fritexten

The definition of a property implies that an object implements a certain interface. The object does not need to be aware of the property. At configuration a properties members are connected to the object members. E.g. The property “Has_Position” could be used to get the position from any object defined to implement “Has_Position”.

TODO: ...

=== OS, Platform and Compiler support
Safir SDK Core is designed and implemented to be platform and compiler independent, so it is most likely able to support most modern Linux distributions and Windows versions, even if they are not listed in the requirements below.

req_1:: Safir SDK Core shall support the latest Ubuntu Long Term Support release, on x86 and x86_64 platforms.
req_2:: Safir SDK Core shall support the latest RedHat Enterprise Linux release on x86_64 platforms.
req_3:: Safir SDK Core shall support the Windows 7 and Windows 8 on x86 and x86_64 platforms.
req_4:: Safir SDK Core shall support Visual Studio 2010, 2012 and 2013.

=== Error and event logging
Logging functionality is provided to allow applications to report errors, events and other information. Log timestamps are expected to conform to the format specified by the logging mechanism, e.g. syslog or windows event log, and the timestamp will be based on the local computer clock.

In a system consisting of multiple computers the log timestamps will only be synchronized if the computer clocks are synchronized. Clock synchronization is outside the scope of Safir SDK Core.

req_1:: Safir SDK Core shall provide a mechanism that allows applications to perform logging.
req_2:: The logging mechanism shall be able to send logs to the platform native logging mechanism (e.g. Windows Event Log)
req_3:: The logging mechanism shall be able to send logs using the Syslog protocol as defined in RFC3164.
req_4:: Logs shall contain timestamp based on the computer clock, category and a log text.

=== Languages
It shall be possible to use Safir SDK Core from different programming languages. Applications written in different languages shall be able to communicate seamlessly.

req_1:: Safir SDK Core shall provide programming interfaces in C++.
req_2:: Safir SDK Core shall provide programming interfaces in Java.
req_3:: Safir SDK Core shall provide programming interfaces in .NET.
req_4:: Safir SDK Core shall provide programming interfaces in Ada.

=== System control and redundancy
Node supervision along with redundancy is provided to detect and act on unexpected application or node losses. The system control mechanism starts and stops the entire system including the Dob and will also keep an unambiguous view of the system, i.e which nodes are part of the system and where individual applications are executing.

req_1:: It shall be possible to supervise the existence of a node.
req_2:: It shall be possible to automatically restart a node after an uncontrolled stop. 
req_3:: It shall be possible to define a fallback system configuration as an addition to the basic system configuration. The fallback system configuration shall be automatically switched to when the basic configuration fails.
req_4:: Safir SDK Core shall provide a start mechanism that starts the system.
req_5:: Safir SDK Core shall provide a stop mechanism that stops the system.
req_6:: The start/stop mechanism shall be configurable to start external applications that is not part of Safir SDK Core.
req_7:: The start/stop mechanism shall be able start and stop applications on any node in the system.
req_8:: The control mechanism shall provide an unambiguous view of wich nodes are part of the system.


=== Context
TODO: bättre fritext!

Information shall be posible to separate into different contexts within the same system. For example real information should never be mixed up with replayed or simulated information.

req_1:: Safir SDK Core shall support separation of information into different contexts.

req_2:: An application that is connected to the Dob in one context shall not be able to access data from other contexts.

