// -*- coding: utf-8 -*-
:encoding: UTF-8

Light Nodes Whitepaper
=====================
:Author: Lars Hagstr√∂m and Joel Ottosson
:date: 2022-08-26

:numbered!:
== Preface

The purpose of this document is to describe the _Light Nodes_ feature that is the
proposed solution to a number issues in current and future Safir SDK Core based systems.

In short this paper proposes that certain Dob nodes can be of a type that has different
requirements and functionality from other nodes. In a client/server system the clients
could typically be light nodes, which would simplify some networking requirements and
make clients easier to manage.

Some of the information in this document was copied from the new_distribution whitepaper,
but this document supercedes the information about light nodes in that document.

=== Why the name ``Light Nodes''?

The other contender for the name of this feature would be something with ``Client''. But
this would be slightly misleading, since it would infer that all clients should be of
this type, and that no servers should be of this type, and that is not necessarily true.

=== Node Type Properties

In this document a few new _Node Type Properties_ are introduced. In the Dob all nodes
are of a certain _Node Type_. There can be any number of Node Types. Each Node Type has a
bunch of parameters that describe how it works. The new properties proposed in this
document are new such parameters.

:numbered:
== Light Nodes Proposal

This section gets more technical, describing the features of light nodes and associated
functionality. If you're looking for more about the benefits of this proposal we suggest
that you skim this section (to get an idea of what the proposal entails), and then jump
to <<benefits>>.

=== Light Nodes

The main part of this proposal is that a node type property is added; whether a node is a _light_
node or not. Light nodes are the _only_ kind of nodes that, after it has been disconnected
(e.g. network cable has been disconnected), can rejoin a system without being
restarted. A light node is for example only allowed to own any global entities that are
unique, which means that when it is rejoined into the system there can be no conflicts
between entity owners.

.New Node Type Property
[width="75%",cols="20%,10%,70%",frame="topbot",options="header"]
|======================
| Property Name | Type | Comment

| IsLight
| boolean
| Is the node a _light_ node.

|======================

The properties of a light node are:

* Can only register handlers for services that are marked as local or _limited_ (see <<limited_types, below>>)
* Can only register handlers for entities that are marked as local or limited.
* Can only own instances of entity types that are marked as local or limited.
* Can subscribe to everything
* Will only receive messages, requests and entity instances from non-light nodes (the <<talksto_option, TalksTo option>> provides more flexibility).
* Can send messages, that will reach non-light nodes.
* Can not become system coordinator (the node that decides when nodes are to be kicked out of the system).

When a light node has been disconnected from a system and then reconnected to the same or
a different system it will start a new Discovery. It may also change its IP address while
it is disconnected, since the discovery will ensure that the new IP address is known by
its counterparts.

A light node may connect to a system with a different incarnation number after
disconnection. I.e. it should not remember or block incarnation numbers when it is
disconnected.

[[resynchronization]]
=== Disconnected behaviour and resynchronization

There are two ways that a disconnected node can behave. Either it can wipe all
registrations and entities, and essentially become ``blank'', or it can keep all
registrations and entities, but as read-only. This latter mode would of course disallow
all requests (to non-local handlers). The easy solution to resynchronization of a node
that used the latter mode would probably be that the node is first wiped completely and
then a new pool distribution from the other nodes is started.

In the options section <<intelligent_resync, below>> there is a description of an
Intelligent resynchronization method, that could be implemented to optimize this, which
would reduce the network load in a system where resynchronizations are frequent.

[[limited_types]]
=== Limited types

A limited type is an Entity or Service type with a few limitations that make it possible
for light nodes to register handlers and own instances of them. The limitations are there
to ensure that a light node can reconnect to a system after it has been disconnected.

* A limited type can have no persistence, i.e. it has neither Volatile, Permanent or Injectable persistence.
* Pending registrations of a limited type is not allowed.
* Overregistration of a limited type is considered a programming or configuration error.
 - An error will be logged if an overregistration is detected.
 - There is no guarantee that all overregistrations will be detected.

[[side_effects]]
=== Side effects

Some side effects of this proposal is that light nodes may not be aware of each other at
all. For example, looking at the Safir.Dob.NodeInfo entity on one light node will not
show instances for all nodes, but only for the light node itself and all the non-light
nodes.

[[benefits]]
== Benefits

=== Simplified network requirements when running on a VPN

In systems running on a client/server based VPN (e.g. OpenVPN) it has been observed that
both the unicast and multicast network configurations scale really badly with increasing
number of nodes. This is likely because the VPN server has to encrypt and decrypt all
data from and to all nodes. And since all nodes communicate with all other nodes the
server node gets very overloaded, especially during startup.

The introduction of Light Nodes would make it possible to make all clients in a
client/server system into light nodes, which would mean that they do not communicate with
each other, only with the server. A client in such a system is likely be easy to adapt to the
``only own limited types'' requirement.

In such a system the negotiation about which node is to be the coordinator (the node that
decides what nodes are actually part of the system) also becomes much simpler, since a
light node cannot be the coordinator.

=== Nodes with bad connectivity

Systems where one or more nodes are connected through a less reliable connection will
become more stable if all the nodes on one side of the bad link are light nodes.

This is due to the fact that again there will be less negotiations about who is to be
coordinator, and also the fact that the light nodes will be able to rejoin a system after
losing regaining a lost connection.

Such a ``disconnected client'' can display status information about the fact that it does
not have up to date information when it is disconnected, or that the information may be
partially out of date while it is resynchronizing.

For the resynchronization to be ``smooth'' the option <<intelligent_resync, intelligent
resync> will probably have to be implemented.

=== Splitting one client into a standalone configuration

This scenario is when it is desirable to disconnect one client from a system, and have it
automatically turn into a standalone system. And upon reconnection any changes should
synchronize, and the standalone system should go back to being a client.

Light nodes are only a small part of the solution to this, but here is a way that it
could be implemented: The client computer that is to be possible to disconnect in fact
has both a client and a server software instance running. The server is connected through
a ``System of systems'' synchronization mechanism (see Safir SDK Core User's guide) over
an ethernet link to the main server of the system. The client software - while the
computer is connected - talks to the main server. When the computer is disconnected, the
client will switch to talking to the local server, which is able to handle all
changes. If the disconnected computer has a radio it may still be able to synchronize
with the main system, or other systems nearby. When the computer is then reconnected the
servers will be able to resynchronize over the ethernet cable (using the System of
systems synch mechanism), and the client software can switch over to talking to the main
server.

The part that light nodes help with this solution is that it makes it possible for the
client to switch servers without needing to be restarted.

== Options

[[talksto_option]]
=== TalksTo

.New Node Type Property
[width="75%",cols="20%,10%,70%",frame="topbot",options="header"]
|======================
| Property Name | Type | Comment

| TalksTo
| list of string
| List of node types that nodes of this type can talk to. \'\*' if all node types.
  Only for nodes where IsLight is true can this be anything other than \'*'.

|======================

This option allows for light nodes to talk to each other. For example they will see each
other's registered types and entities (of Limited Types) and be able to send entity and
service requests and messages.

The benefit of this option is that software on the clients can be more aware of each
other, for example the issue described in <<side_effects>> will disappear if all light
nodes are able to talk to each other.

Of course configuring light nodes to be able to talk to each other still requires network
connectivity between them. No forwarding is performed.

[[wanted_types_option]]
=== WantedTypes och UnwantedTypes

.New Node Type Properties
[width="75%",cols="20%,10%,70%",frame="topbot",options="header"]
|======================
| Property Name | Type | Comment

| Wanted types
| list of regex
| All types that match will be sent to the node (unless they also match an Unwanted, below).
  Only for nodes where IsLight is true can this be anything other than \'.*'.

| Unwanted types
| list of regex
| Types that match will not be sent to the node. Must be empty if IsLight is false.

|======================

This option allows for filtering of data sent to certain node types. For example a set of
light nodes can be set up to not receive any instances of a certain set of entities. This
can be used to reduce the network traffic, or to reduce the memory use on some light
nodes.

[[intelligent_resync_option]]
=== Intelligent resync

This option is meant to solve the problems with resynchronizations, described in
<<resynchronization>>.

This would allow a light node that is reconnecting to the same incarnation of a system to
only get sent new and updated states (a state in this context means a service or entity
registration or an entity instance) and a list of states that need to be removed.

A light node - when it is connecting to a system after having been disconnected - would
check if the system has the same incarnation id as the one it was previously connected
to. If the Ids are the same an intelligent resync is possible. If they are different a
full resync is needed.


[[registration_forwarding_option]]
=== Forwarding of registrations

This option makes all registrations available on light nodes, even those from other light
nodes that it is not receiving data from. The purpose is to increase the chances of
overregistrations being detected to facilitate software development and system
configuration.

All regular (i.e. non-light) nodes forward changes in registrations on limited types to
everyone. This will ensure that everyone gets changes in registration on limited types,
although it will produce a certain amount of overhead. The overhead is only registration
states of limited types, so it should be only a small amount of traffic in all sensible
systems.

The forwarding of registrations will ensure that two light nodes cannot have the same
type registered, and hence it will ensure that ownership is consistent. Of course it does
not guarantee that all nodes contain the same information, since some entity instances
may not be present on all nodes. But that will be obvious to the user since light nodes
do not communicate (or because of the TalksTo field in the node type)..

== Detailed design

This section contains some ideas and thoughts on details in the design and implementation
of this proposal.

=== Manual injection of seeds

We need an API for injecting new seeds into a disconnected light node. This is needed to
make it possible for a light node to switch servers upon reconnection.

We probably also want an API for manually disconnecting a light node from a system
too. And for switching to another server.

=== More node statuses

More node statuses need to be added, for example so that a UI can reflect the status of
the node. Something like _NoPool_, _PdComplete_, _Disconnected_ and _PdResynchronizing_
are useful states (with better names). PdResynchronizing is especially important if we
implement <<intelligent_resync>>, since the state where resynchronization is in progress
actually contains a jumble of old and new data.

=== Ghosts and light nodes

There is no need to send ghosts to light nodes. Persistent entities cannot be owned on a
light node.

=== Intelligent resync and endstates

Delete states (unregistered handlers and deleted entity instances) are only kept around
for a short while. So when a lightnode reconnects and wants to do an intelligent resync
there needs to be a ``negotiation'' of some kind so that the light node can work out what
entities need to be deleted.

