// -*- coding: utf-8 -*-
:encoding: UTF-8

Readonly installation of Safir SDK Core
=======================================
Lars Hagstr√∂m
17 May 2013

== Preface
TODO: Describe problem / current situation

 * dots_generated (runtime and sdk)
 * lock files
 * log files
 * crash_dumps
 * dope files
 * shared memory files

== Dots Generated

The goal is to make the building of the separate dots_generated dlls (or shared libraries, but I'll write dll, since it is shorter) into more like building a normal dll. Currently all dlls are rebuilt every time dobmake is run, which is a waste of time for most of the dou files.


=== Things that need doing

dots_v must read dou files from multiple places::
       During generation of dll B dots_v may have to check dou files from dll A if there are dependencies.

dots_kernel must read dou files from multiple places::
       Dou/dom files need to be stored in multiple places, so we need to read from all of them.

Build of dlls must be able to specify dependencies::
      Each dll build has to specify its dependencies, for dots_v to pick up, and to be able to link properly.

dots_cpp (or equivalent) has to load all dots_generated dlls::
      All exes need to have all dlls loaded, regardless of whether they use them (explicitly) or not. They may use them indirectly by receiving data of a derived type (e.g. they subscribe to ParentType but receive a ChildType which is located in another dll).

=== Things to consider

Each "dll" needs to be built from one directory (with dou and dom files in directly or in subdirectories). 

Maybe there should be a config file in each directory that specifies dependencies. This might be a CMakeLists.txt file that imports/uses some cmake files that we provide.

How do we specify which directories need to be loaded by dots_kernel at startup?::

    * Environment variable?
    * Or maybe a config file /etc/safir/dots.ini on Linux, that specifies which dlls and their corresponding dou/dom-directories should be loaded at startup.
      - This file is only editable by root, but maybe that is a good idea? How do we want this to work? 
      - Or maybe it should be a config file in $HOME? 
      - Or maybe both? Have the /etc-file specify whether we should look for a user-config file as well might be the best solution.
        * provides both ease of use for development machines
        * and security for an installed system
      - What does this mean on windows?

At build time we need to specify our dependencies::
    * Is this just "abstract" names as specified in the above config file?
    * Or is it directories and exact dlls?
      - It probably has to be the former, otherwise it probably gets very messy with all the language bindings
      - This probably means that we don't use CMakeLists.txt-files in the dll directories, but some other config file format.
        * Although having CMakeLists.txt in the dll directories would mean that we can build our dlls directly with the build script, which would be nice.



