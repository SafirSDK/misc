// -*- coding: utf-8 -*-
:encoding: UTF-8

Readonly installation of Safir SDK Core
=======================================
Lars Hagström
20 Jun 2013

== Preface

Currently Safir SDK puts all of its files into two directories, defined by SAFIR_RUNTIME and SAFIR_SDK environment variables. Some of the files and directories in there need to be writeable for it to be possible to run the system. And some directories/files need to be changed to add types into the system during development (i.e. to run dobmake.py).

This is not ideal, since it really requires a project to put all their data into the Safir structure. It would be better to be able to separate the SDK stuff from the project stuff, so that the SDK can be installed as readonly and "used" rather than "changed" to build features on top of it.

The runtime and sdk directories together are sometimes referred to as a _tower_ for historic reasons. But this notion is something that we want to move away from.


[IMPORTANT]
================
Question: Vill vi fortfarande kunna ha allt samlat i en katalog som man kan flytta på enkelt? Eller är MSI/deb/rpm det enda vi vill stödja?
================

== Issues

Some of the things that need to be considered and changed:

dots_generated dou/dom files in _runtime/_::
Some files or the whole directory needs to be writeable to allow changes in system configuration in an installed product and during development.

dots_generated dou/dom files in _sdk/_ and dlls in _runtime/bin/_::
These need to be writeable by a developer so that new types can be added and dobmake.py run

Lock Files::
These are currently in runtime/data/text/lluf, and this directory needs to be writeable to allow lock files to be used.

Low Level Logs::
These are currently stored in a subdirectory to runtime/log, if the log directory exists. If low level logs are wanted the log directory needs to be writeable.

Crash Dumps::
Crash dumps are currently stored under runtime/data/crash_dumps. This directory needs to be writeable for crash dumps to work.

Dope Files::
Already configurable in dou-parameter. Default should be changed, though.

Shared Memory Files::
These are controlled by Boost.Interprocess, and we don't really have much control over them.

Sate settings::
Currently stored in runtime/bin/SateSettings.xml!

SAFIR_* environment variables::
These are used by our current users for knowing where to put their stuff. If we were to use them but change their meaning in some way it may break user code. Better to stop using them altogether and rely on some other mechanism.

Another issue that we should consider is whether we should make any changes to the way we behave w.r.t different users on the computer. Currently we mostly ignore the issue...

.The goal:
Safir SDK Core should be possible to install as readonly in an
OS native way (msi, rpm, deb, etc), and users should be able to use
the SDK without having to modify anything but clearly defined config
files.

== Proposed Solution

[[config_files]]
=== Configuration file location

If we are to move away from the use of environment varibles for defining where files are expected to be found we need to introduce some configuration files that control how the SDK works, and where it expects other files to be located.

These are the configuration files that we need to be able to find to use and start the system:

 * logging.ini - contains logging settings
 * locations.ini - contains locations of stuff we need, e.g. lock file and crash dump directories.
 * typesystem.ini - contains typesystem configuration (see below).

These should all be in one configuration file directory. The locations that we look for this config directory need to be hard coded, but should be as OS-native as possible.

Linux and Windows have different native places to put configuration files (the following locations are checked in order, and the first one found is used):

*Linux*::

  1. /etc/safir_sdk_core/ - system wide configuration
  2. _HOME_/.config/safir_sdk_core/ - user configuration
  3. $SAFIR_RUNTIME/data/core_config/

+
See http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html[the basedir-spec of freedesktop.org] for info on how to find user .config dir.

*Windows*::

  1. _CSIDL_COMMON_APPDATA_\safir_sdk_core\config\ - system wide configuration
  2. _CSIDL_LOCAL_APPDATA_\safir_sdk_core\config\ - user configuration
  3. %SAFIR_RUNTIME%\data\core_config\

+
See these two links for information about windows paths that also explain the _CSIDL_ stuff: "http://blogs.msdn.com/b/cjacks/archive/2008/02/05/where-should-i-write-program-data-instead-of-program-files.aspx[Where Should I Write Program Data...?]" and "http://blogs.msdn.com/b/patricka/archive/2010/03/18/where-should-i-store-my-data-and-configuration-files-if-i-target-multiple-os-versions.aspx[Where Should I Store my Data and Config...?]".
+
One problem is that these config directories are usually hidden, but we could provide a simple configuration editor in our install package (e.g. a shortcut to Notepad...)

The configuration under $SAFIR_RUNTIME is a stopgap measure, and will probably be removed once we reach the full goal of having the SDK as an installable package. But until we've reached that goal, it is easier for customers to have the configuration in the runtime directory, but when we're there we want the configuration to be found where the native applications would store it.

The reason for allowing both a system-wide and user-only config files is that it should be possible for a user to install the SDK on a computer without having root/admin access (i.e. just build it from source in his/her home directory). 

[[special_variables]]
==== Environment and "special" variable expansion
Since the configuration files need to be able to refer to system directories they need to support environment variable expansion. E.g. +$(HOME)+ should expand to the value of that environment variable.

On Windows platforms we should also support the _CSIDL_ values mentioned above, since Windows does not guarantee that there are always environment variables that correspond to them. For example the %PROGRAMDATA% environment variable is not guaranteed to be set or to point to the same directory as _CSIDL_COMMON_APPDATA_. So we should support _special variables_ as well as environment variables, e.g. +@\{CSIDL_COMMON_APPDATA\}+ will be expanded to the the location of that folder.

[[dots_generated]]
=== Dots Generated

The goal is to make the building of the separate dots_generated dlls into more like building a normal dll. Currently all dlls are rebuilt every time dobmake is run, which is a waste of time for most of the dou files. It also means that there is no way to separate the stuff that belongs to the SDK from the project specific/user stuff, instead all is built at the same time, into one set of dlls.

Note that when we say "dll" in the above paragraph we really mean _dll_ or _shared library_ for C++ and Ada, _jar_ for Java and _assembly_ for C#. For the purposes of this section these terms are really interchangeable, and any changes done will need to apply to all of the dots_generated functionality for all language interfaces.

==== Things that need doing

dots_kernel must read dou files from multiple places::
Dou/dom files need to be stored in multiple places, so we need to read from all of them.

We need to work out how parameter override should work::
A user must be able to override a parameter in a read-only file, so dots_kernel needs to have rules for this.

dots language bindings (e.g. dots_cpp) has to load all dots_generated dlls::
All exes need to have all dlls loaded, regardless of whether they use them (explicitly) or not. They may use them indirectly by receiving data of a derived type (e.g. they subscribe to ParentType but receive a ChildType which is located in another dll).

Build of dlls must be able to specify dependencies::
Each dll build has to specify its dependencies, for dots_v to pick up, and to be able to link properly.

dots_v must read dou files from multiple places::
During generation of dll B dots_v may have to check dou files from dll A if there are dependencies.

dots_java needs to read namespace mappings from multiple places::
Namespace mapping files can be located in all the dou directories.

==== Things to consider / Some random thoughts

Each dll needs to be built from one directory (with dou and dom files in directly or in subdirectories). 

Each directory needs to contain a config file that specifies dependencies. This might be a CMakeLists.txt file that imports/uses some cmake files that we provide.

The _typesystem.ini_ config file is used to specify which directories of dou files need to be loaded by dots_kernel at startup, and which dlls the dots language bindings need to load. See below for suggested ini file format.

==== typesystem.ini file format

------------------------------------------
load_user_typesystem_ini=1   ;causes ~/.config/safir_sdk_core/typesystem.ini to 
                             ;be loaded after this file

;default base directory for dou/dom files, library name will be appended.
default_dou_directory=/usr/share/safir/

[Core]
;dou_directory will be set to /usr/share/safir/Core
;cpp library will be loaded from PATH on windows and ld config on Linux
;ada ???
;java ???
;dotnet loaded from GAC?
dependencies=None

[DoseTest]
#Here we set directories explicitly
#what happens with dotnet ada and java?
dou_directory=/var/lib/safir/DoseTest
library_location=/usr/lib/ 
dependencies=Core

[DotsTest]
dou_directory=/usr/share/safir/DotsTest
library_location=/usr/lib/
dependencies=None
------------------------------------------

Rename the dlls from dots_generated to safir_generated. We want to reduce the number of cryptic acronyms.


[NOTE]
================
Where it makes sense, the OS:s binary load paths (e.g. PATH on Windows for dlls and exes) should be used. The idea is to use the native mechanisms as much as possible! So avoid having any of the ini files pointing to full paths of, instead just give a name and use native mechanisms for finding the full path.
================

[[lock_files]]
=== Lock Files

The lock file directory should be configurable in _locations.ini_. 

On Windows the default should be +C:\ProgramData\safir_sdk_core\locks+.

On Linux the default should be +/var/run/safir_sdk_core/locks+.

[[low_level_logs]]
=== Low Level Logs

The low level logging component currently has built in "magic" for determining whether logging should be on or off, by checking whether the log directory exists or not, and by checking a magic file in the log directory.

This should be changed so that the low level logging settings are controlled by editing the _logging.ini_ configuration file.

Default log file destination should be +C:\ProgramData\safir_sdk_core\log+ on Windows, and +/var/log/safir_sdk_core+ on Linux.

[IMPORTANT]
================
Question: Should we change low level logs to go through the new syslog facility?
================

[[crash_dumps]]
=== Crash Dumps

The dump file directory should be configurable in _locations.ini_. 

On Windows the default should be +C:\ProgramData\safir_sdk_core\crash_dumps+.

[IMPORTANT]
================
Question: What should the linux default be?!
================

=== Dope Files

The default value (in Safir.Dob.PersistenceParameters.dou) should be changed to +C:\ProgramData\safir_sdk_core\persistence+ on Windows and +/var/lib/safir_sdk_core+ on Linux.

We need to add expansion of the "special variables" (as described <<special_variables,above>> to dou parameters.

=== Shared Memory Files

We do not have a way to control where these files are put, but we should document where they usually end up, and maybe provide a tool to clean up the files.

[IMPORTANT]
================
Question: Should we allow control over shared memory file permissions?
================


[[first_step]]
== The First Step

As a first step we will implement the changes suggested in <<config_files,Configuration file locations>>,  <<lock_files,Lock Files>>, <<crash_dumps,Crash Dumps>> and the logging locations from <<low_level_log,Low Level Logs>>.

This will allow projects to have the _runtime_ directory as read-only.

Also we will introduce a _typesystem.ini_ file as described in <<dots_generated, Dots Generated>>, but the only part of it that we will use is the _dou_directory_ parameter for each section. This will allow users to add a directory containing parameter override dou files.

.typesystem.ini first step example
------------------------------------------
[Default]
dou_directory=$(SAFIR_RUNTIME)/data/text/dots/classes

[Override]
dou_directory=/path/to/some/other/directory
------------------------------------------

== Current Status
In Safir SDK Core version 4.4 we have implemented the changes suggested in <<first_step, The First Step>>.

=== TODO

A list of unsorted things that are not yet taken care of:

  - Support the See http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html[the basedir-spec] completely on Linux (an idea would be to use the special variable syntax for supporting these XDG_* environment variables, since they have fallbacks).
  - Do the whole dots_generated thing.
  - maybe make dobmake.py aware of typesystem.ini even before the complete dots_generated rewrite is complete.
  - Make low level logger less magic.
  - New syslog implementation should use ConfigReader.
  - dots_kernel rewrite (aka dots_internal) should use ConfigReader (both for finding the dou files and expanding variables).
  - Move dots shared memory size to typesystem.ini
  - Automatic tests need a way of overriding any user ini-configuration (tests usually need their own specific config)
