// -*- coding: utf-8 -*-
:encoding: UTF-8

New Distribution Whitepaper
==========================
:Author: Lars Hagström, Anders Widén and Joel Ottosson
7 Jan 2013

== Preface
The purpose of this document is to xxx.

== Benefits
Robust communication::
  Utfrysning;;
    blablabla
  Slow node will not slow down all nodes;;
    asdfasdf
  Support for other topologies;;
    asdffff
Removal of general "join" will simplify design::
  blabla
Addition of specific "join" cases will allow more uses::
  Disconnected node will keep all entities as read only;;
    blabla
  Disconnected node will become empty;;
    blabla
Less static configuration::
  blabla
Easier to display system status::
  aasdfafs
Simpler to start system::
  Less needs for start scripts. All parts of Safir SDK Core and the rest of the system gets started by the same mechanism.

== 3rd party dependencies
Preferrably some 3rd party products should be used in the development of the new distribution mechanism, to simplify and speed up the development process, and to reduce maintenance costs.

=== Distribution mechanisms

DDS::
  widde
ZeroMQ::
  joel
Bittorrent/P2P::
  This is not a technology that we can use directly per se, but we can find useful algorithms and ideas in the enormous amounts of research that has been done in academia in this area.
Pragmatic General Multicast::
  joel
Spread::
  lars
Database replication mechanisms::
  widde
RabbitMQ::
  joel
Apache Qpid::
  joel
MassTransit::
  widde
NServiceBus::
  widde

=== Data format / Serialization
Using an open or standard format for the data packets and data headers would remove the need of "rolling our own", and probably also easier to use third party tools such as Wireshark for debugging.

We want a binary format since the blobs are already binary, so XML- or JSON-based formats have not been investigated.
In some distant future we might also want to change the blob format to use an open format, but in the short term we will just wrap them in whatever format we choose.

We only need support for C\+\+, since all the data transport and blob packing/unpacking code is C++ code.

Protobuf - http://code.google.com/p/protobuf/::
  * Google developed data serialization format. 
  * Used by almost all Google internal RPC and file formats. 
  * Well documented and well supported (by Google).
  * There are also multiple implementations, e.g. SAX-like deserialization libraries are available.
  * Stable and widely used.
Apache Thrift - http://thrift.apache.org/::
  * Interfaces to more languages than Protobuf.
  * Slightly larger serialized results compared to Protobuf.
  * Maintenance seems less "professional" than Protobuf.

==== Conclusion
*Protobuf* seems to be the sensible choice. Wider usage, better documentation and better maintenance/development.

== Requirements

=== General requirements
Platform independence of 3rd party dependencies::
  Chosen technologies shall run on Win32 and Linux.
